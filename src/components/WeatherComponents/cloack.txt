import { WeatherDataContext } from '@/utils/WeatherDataReducer';
import React, { useState, useEffect, useContext } from 'react';

const timezoneMap = {
	'+05:30': 'Asia/Kolkata',
	'+00:00': 'UTC',
	'-05:00': 'America/New_York',
	// Add more mappings as needed
};

// Function to format a timestamp with a specific timezone offset
const formatTimestamp = (ts, offsetSeconds, winWidth) => {
	const lang = 'en-US'; // use the current language
	let date = new Date(ts);
	const timeZone = formatOffset(offsetSeconds);
	const timeZoneName = timezoneMap[timeZone] || 'UTC';

	if (timeZone === 'Invalid') {
		return new Date(ts).toLocaleTimeString(lang, { hour12: true });
	}

	if (winWidth > 640) {
		return new Date(ts).toLocaleTimeString(lang, {
			timeZone,
			hour12: true,
		});
	}
	return new Intl.DateTimeFormat(lang, {
		timeZone: timeZoneName,
		hour12: true,
		hour: 'numeric',
		minute: 'numeric',
		second: 'numeric',
	}).format(date);
};

// Function to convert offset in seconds to string in ISO 8601 extended format.
// Example: 19800 => "+05:30"
const formatOffset = offsetSeconds => {
	if (isNaN(offsetSeconds)) {
		return 'Invalid';
	}
	const sign = offsetSeconds < 0 ? '-' : '+';
	const seconds = Math.abs(offsetSeconds);
	const hours = Math.floor(seconds / 3600);
	const minutes = Math.floor((seconds % 3600) / 60);
	return `${sign}${hours.toString().padStart(2, '0')}:${minutes
		.toString()
		.padStart(2, '0')}`;
};
const Clock = ({ timestamp, timezoneOffsetSeconds, winWidth }) => {
	const { state } = useContext(WeatherDataContext);
	const [currentTime, setCurrentTime] = useState(
		formatTimestamp(timestamp, timezoneOffsetSeconds, winWidth)
	);
	console.log(winWidth);
	console.log(currentTime);
	console.log(timestamp);
	console.log(timezoneOffsetSeconds);

	useEffect(() => {
		const interval = setInterval(() => {
			setCurrentTime(formatTimestamp(Date.now(), state.timezone));
		}, 1000);
		// console.log(`ooooo yee ${state.timezone}`);

		return () => clearInterval(interval);
	}, [state.timezone, winWidth]);

	return (
		<div>
			<p>{currentTime}</p>
		</div>
	);
};

export default Clock;
